name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version (leave empty to use git tag)'
        required: false
        type: string
      build_docker:
        description: 'Build and push Docker images'
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build with GoReleaser
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Get version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"
      
      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      # 确定是构建还是发布
      - name: Determine if this is a release
        id: is_release
        run: |
          if [[ "${{ github.event_name }}" == "release" || "${{ github.ref }}" == refs/tags/* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
          echo "Event: ${{ github.event_name }}, Ref: ${{ github.ref }}, Is Release: ${{ steps.is_release.outputs.is_release }}"

      # 如果是正式release，使用goreleaser发布
      - name: Release with GoReleaser
        if: steps.is_release.outputs.is_release == 'true'
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 如果不是正式release，只构建，不发布
      - name: Build with GoReleaser (without releasing)
        if: steps.is_release.outputs.is_release != 'true'
        run: |
          # Create a temporary .goreleaser.yml file for building only (no release)
          cat > .goreleaser.build.yml << EOF
          project_name: connection-cli
          builds:
            - id: connection-cli
              main: ./cmd
              binary: connection-cli
              env:
                - CGO_ENABLED=0
              ldflags:
                - -s -w -X main.Version=${{ steps.get_version.outputs.version }}
              goos:
                - linux
                - darwin
                - windows
              goarch:
                - amd64
                - arm64
              ignore:
                - goos: windows
                  goarch: arm64
          EOF
          
          # Build using GoReleaser
          goreleaser build --config .goreleaser.build.yml --clean --snapshot
          
      # 移动二进制文件到标准位置
      - name: Prepare binaries
        run: |
          mkdir -p build
          if [[ -d "dist/connection-cli_linux_amd64_v1" ]]; then
            cp dist/connection-cli_linux_amd64_v1/connection-cli build/connection-cli-linux-amd64
          elif [[ -d "dist/connection-cli_linux_amd64" ]]; then
            cp dist/connection-cli_linux_amd64/connection-cli build/connection-cli-linux-amd64
          fi
          
          if [[ -d "dist/connection-cli_linux_arm64" ]]; then
            cp dist/connection-cli_linux_arm64/connection-cli build/connection-cli-linux-arm64
          fi
          
          if [[ -d "dist/connection-cli_darwin_amd64_v1" ]]; then
            cp dist/connection-cli_darwin_amd64_v1/connection-cli build/connection-cli-darwin-amd64
          elif [[ -d "dist/connection-cli_darwin_amd64" ]]; then
            cp dist/connection-cli_darwin_amd64/connection-cli build/connection-cli-darwin-amd64
          fi
          
          if [[ -d "dist/connection-cli_darwin_arm64" ]]; then
            cp dist/connection-cli_darwin_arm64/connection-cli build/connection-cli-darwin-arm64
          fi
          
          if [[ -d "dist/connection-cli_windows_amd64_v1" ]]; then
            cp dist/connection-cli_windows_amd64_v1/connection-cli.exe build/connection-cli-windows-amd64.exe
          elif [[ -d "dist/connection-cli_windows_amd64" ]]; then
            cp dist/connection-cli_windows_amd64/connection-cli.exe build/connection-cli-windows-amd64.exe
          fi
          
          ls -la build/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: build/

      # 添加一个额外的步骤，保存GoReleaser的dist目录，用于Docker构建
      - name: Upload dist directory
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-dist
          path: dist/

  docker:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: build  # 确保依赖于构建任务，以使用其产物
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_docker == 'true')
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Get version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      # 下载GoReleaser构建的二进制文件
      - name: Download goreleaser dist
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-dist
          path: dist

      # 准备构建上下文
      - name: Prepare build context
        run: |
          # 创建构建上下文目录
          mkdir -p docker-context
          
          # 复制Dockerfile和其他需要的文件
          cp Dockerfile entrypoint.sh docker-context/
          
          # 创建二进制文件目录
          mkdir -p docker-context/bin
          
          # 查找并复制Linux二进制文件到Docker构建上下文
          if [[ -f "dist/connection-cli_linux_amd64_v1/connection-cli" ]]; then
            cp dist/connection-cli_linux_amd64_v1/connection-cli docker-context/bin/connection-cli-linux-amd64
          elif [[ -f "dist/connection-cli_linux_amd64/connection-cli" ]]; then
            cp dist/connection-cli_linux_amd64/connection-cli docker-context/bin/connection-cli-linux-amd64
          fi
          
          if [[ -f "dist/connection-cli_linux_arm64/connection-cli" ]]; then
            cp dist/connection-cli_linux_arm64/connection-cli docker-context/bin/connection-cli-linux-arm64
          fi
          
          # 使构建脚本可执行
          chmod +x docker-context/entrypoint.sh
          
          # 创建简化版Dockerfile，使用预构建的二进制文件
          cat > docker-context/Dockerfile << EOF
          FROM alpine:latest
          
          ARG VERSION=dev
          
          LABEL version="\${VERSION}" \\
                maintainer="zuokaiqi" \\
                description="Connection testing CLI tool"
          
          WORKDIR /app
          
          # 复制预编译的二进制文件
          COPY bin/connection-cli-linux-amd64 /app/connection-cli
          
          # 创建multi-arch二进制目录
          RUN mkdir -p /app/bin
          COPY bin/* /app/bin/
          
          # 使二进制文件可执行
          RUN chmod +x /app/connection-cli /app/bin/*
          
          # 复制entrypoint脚本
          COPY entrypoint.sh /app/entrypoint.sh
          RUN chmod +x /app/entrypoint.sh
          
          # 设置entrypoint
          ENTRYPOINT ["/app/entrypoint.sh"]
          
          # 健康检查
          HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \\
            CMD /app/connection-cli -mode=\${HEALTH_MODE:-port} -host=\${HEALTH_HOST:-localhost} -port=\${HEALTH_PORT:-80} -timeout=\${HEALTH_TIMEOUT:-5s} || exit 1
          EOF

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zuokaiqi/connection-cli
          tags: |
            type=raw,value=${{ steps.get_version.outputs.version }}
            type=raw,value=latest

      - name: Build and push with optimized Dockerfile
        uses: docker/build-push-action@v5
        with:
          context: docker-context
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.get_version.outputs.version }} 