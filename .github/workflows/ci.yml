name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version (leave empty to use git tag)'
        required: false
        type: string
      build_docker:
        description: 'Build and push Docker images'
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Get version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Build for all platforms
        run: |
          mkdir -p build
          GOOS=linux GOARCH=amd64 go build -ldflags="-X main.Version=${{ steps.get_version.outputs.version }}" -o build/connection-cli-linux-amd64 ./cmd/
          GOOS=linux GOARCH=arm64 go build -ldflags="-X main.Version=${{ steps.get_version.outputs.version }}" -o build/connection-cli-linux-arm64 ./cmd/
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.Version=${{ steps.get_version.outputs.version }}" -o build/connection-cli-darwin-amd64 ./cmd/
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X main.Version=${{ steps.get_version.outputs.version }}" -o build/connection-cli-darwin-arm64 ./cmd/
          GOOS=windows GOARCH=amd64 go build -ldflags="-X main.Version=${{ steps.get_version.outputs.version }}" -o build/connection-cli-windows-amd64.exe ./cmd/

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: build/

  docker:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_docker == 'true')
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Get version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: zuokaiqi/connection-cli
          tags: |
            type=raw,value=${{ steps.get_version.outputs.version }}
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ steps.get_version.outputs.version }}

  release:
    name: Attach binaries to release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: build/

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true 