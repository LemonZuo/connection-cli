name: Build and Release

on:
  push:
    tags:
      - "v*"  # 只在推送v开头的tag时触发
  workflow_dispatch:  # 支持手动触发
    inputs:
      version_override:
        description: 'Override version (leave empty to use git tag)'
        required: false
        type: string
      build_docker:
        description: 'Build and push Docker images'
        required: false
        type: boolean
        default: false

# 使用concurrency确保同时只有一个工作流运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 预检步骤：判断是否继续运行完整工作流
  pre_check:
    name: Check Trigger Event
    runs-on: ubuntu-latest
    outputs:
      should_run_full_workflow: ${{ steps.check.outputs.should_run }}
      is_tag_or_release: ${{ steps.check.outputs.is_tag_or_release }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Determine event type
        id: check
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          # 如果是tag推送，则运行完整工作流包括Docker和Release
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "This is a tag push event - will run full workflow"
            echo "should_run=true" >> $GITHUB_OUTPUT
            echo "is_tag_or_release=true" >> $GITHUB_OUTPUT
          # 如果是手动触发且指定构建Docker，则运行完整工作流
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "This is a manual trigger - will run full workflow"
            echo "should_run=true" >> $GITHUB_OUTPUT
            if [[ "${{ github.event.inputs.build_docker }}" == "true" ]]; then
              echo "is_tag_or_release=true" >> $GITHUB_OUTPUT
            else
              echo "is_tag_or_release=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "This is an unexpected event - will not run"
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "is_tag_or_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Get version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="${{ github.ref_name }}"
          else
            VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "1.0.0")
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

  # 1. 测试阶段
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: pre_check
    if: needs.pre_check.outputs.should_run_full_workflow == 'true'
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

  # 2. 使用GoReleaser构建可执行文件
  build:
    name: Build with GoReleaser
    runs-on: ubuntu-latest
    needs: [pre_check, test]  # 依赖预检和测试
    if: needs.pre_check.outputs.should_run_full_workflow == 'true'
    steps:
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      # 使用GoReleaser构建（但不发布）
      - name: Build with GoReleaser (without releasing)
        run: |
          # Create a temporary .goreleaser.yml file for building only (no release)
          cat > .goreleaser.build.yml << EOF
          project_name: connection-cli
          builds:
            - id: connection-cli
              main: ./cmd
              binary: connection-cli
              env:
                - CGO_ENABLED=0
              ldflags:
                - -s -w -X main.Version=${{ needs.pre_check.outputs.version }}
              goos:
                - linux
                - darwin
                - windows
              goarch:
                - amd64
                - arm64
              ignore:
                - goos: windows
                  goarch: arm64
          # 不创建压缩包
          archives:
            - format: binary
              name_template: "{{ .Binary }}"
              allow_different_binary_count: true
              files: []  # 不包含任何额外文件
          checksum:
            name_template: 'checksums.txt'
          EOF
          
          # Build using GoReleaser
          goreleaser build --config .goreleaser.build.yml --clean --snapshot
          
      # 移动二进制文件到标准位置
      - name: Prepare binaries
        run: |
          mkdir -p build
          if [[ -d "dist/connection-cli_linux_amd64_v1" ]]; then
            cp dist/connection-cli_linux_amd64_v1/connection-cli build/connection-cli-linux-amd64
          elif [[ -d "dist/connection-cli_linux_amd64" ]]; then
            cp dist/connection-cli_linux_amd64/connection-cli build/connection-cli-linux-amd64
          fi
          
          if [[ -d "dist/connection-cli_linux_arm64" ]]; then
            cp dist/connection-cli_linux_arm64/connection-cli build/connection-cli-linux-arm64
          fi
          
          if [[ -d "dist/connection-cli_darwin_amd64_v1" ]]; then
            cp dist/connection-cli_darwin_amd64_v1/connection-cli build/connection-cli-darwin-amd64
          elif [[ -d "dist/connection-cli_darwin_amd64" ]]; then
            cp dist/connection-cli_darwin_amd64/connection-cli build/connection-cli-darwin-amd64
          fi
          
          if [[ -d "dist/connection-cli_darwin_arm64" ]]; then
            cp dist/connection-cli_darwin_arm64/connection-cli build/connection-cli-darwin-arm64
          fi
          
          if [[ -d "dist/connection-cli_windows_amd64_v1" ]]; then
            cp dist/connection-cli_windows_amd64_v1/connection-cli.exe build/connection-cli-windows-amd64.exe
          elif [[ -d "dist/connection-cli_windows_amd64" ]]; then
            cp dist/connection-cli_windows_amd64/connection-cli.exe build/connection-cli-windows-amd64.exe
          fi
          
          ls -la build/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: build/

      # 添加一个额外的步骤，保存GoReleaser的dist目录，用于Docker构建
      - name: Upload dist directory
        if: needs.pre_check.outputs.is_tag_or_release == 'true' || github.event.inputs.build_docker == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: goreleaser-dist
          path: dist/

  # 3. 构建Docker镜像（只在tag或手动触发时运行）
  docker:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    needs: [pre_check, build]  # 依赖预检和构建
    if: needs.pre_check.outputs.is_tag_or_release == 'true'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      # 下载GoReleaser构建的二进制文件
      - name: Download goreleaser dist
        uses: actions/download-artifact@v4
        with:
          name: goreleaser-dist
          path: dist

      # 准备构建上下文
      - name: Prepare build context
        run: |
          # 创建构建上下文目录
          mkdir -p docker-context
          
          # 复制Dockerfile和其他需要的文件
          cp Dockerfile entrypoint.sh docker-context/
          
          # 创建二进制文件目录
          mkdir -p docker-context/bin
          
          # 查找并复制Linux二进制文件到Docker构建上下文
          if [[ -f "dist/connection-cli_linux_amd64_v1/connection-cli" ]]; then
            cp dist/connection-cli_linux_amd64_v1/connection-cli docker-context/bin/connection-cli-linux-amd64
          elif [[ -f "dist/connection-cli_linux_amd64/connection-cli" ]]; then
            cp dist/connection-cli_linux_amd64/connection-cli docker-context/bin/connection-cli-linux-amd64
          fi
          
          if [[ -f "dist/connection-cli_linux_arm64/connection-cli" ]]; then
            cp dist/connection-cli_linux_arm64/connection-cli docker-context/bin/connection-cli-linux-arm64
          fi
          
          # 使构建脚本可执行
          chmod +x docker-context/entrypoint.sh
          
          # 创建简化版Dockerfile，使用预构建的二进制文件
          cat > docker-context/Dockerfile << EOF
          FROM alpine:latest
          
          ARG VERSION=dev
          
          WORKDIR /app
          
          # 复制预编译的二进制文件（根据平台自动选择）
          COPY bin/connection-cli-linux-amd64 /app/bin/connection-cli-linux-amd64
          COPY bin/connection-cli-linux-arm64 /app/bin/connection-cli-linux-arm64
          
          # 设置 TARGETPLATFORM 环境变量以在entrypoint中使用
          ARG TARGETPLATFORM
          ENV TARGETPLATFORM=\${TARGETPLATFORM:-linux/amd64}
          
          # 根据平台选择正确的二进制文件
          RUN if [ "\${TARGETPLATFORM}" = "linux/arm64" ]; then \\
                cp /app/bin/connection-cli-linux-arm64 /app/connection-cli; \\
              else \\
                cp /app/bin/connection-cli-linux-amd64 /app/connection-cli; \\
              fi && \\
              chmod +x /app/connection-cli
          
          # 复制entrypoint脚本
          COPY entrypoint.sh /app/entrypoint.sh
          RUN chmod +x /app/entrypoint.sh
          
          # 设置entrypoint
          ENTRYPOINT ["/app/entrypoint.sh"]
          EOF

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/connection-cli
          tags: |
            type=raw,value=${{ needs.pre_check.outputs.version }}
            type=raw,value=latest

      - name: Build and push with optimized Dockerfile
        uses: docker/build-push-action@v5
        with:
          context: docker-context
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.pre_check.outputs.version }}

  # 4. 发布Release
  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [pre_check, build, docker]  # 依赖预检、构建和Docker
    if: needs.pre_check.outputs.is_tag_or_release == 'true' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: build

      - name: Create checksums
        run: |
          cd build
          # 确保使用正确的通配符，包含所有文件
          find . -type f -not -name "checksums.txt" -exec shasum -a 256 {} \; > checksums.txt
          cat checksums.txt

      - name: Get previous tag
        id: previoustag
        run: |
          # 获取当前标签
          CURRENT_TAG="${{ needs.pre_check.outputs.version }}"
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $CURRENT_TAG^ 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT
          
          echo "Current tag: $CURRENT_TAG"
          echo "Previous tag: $PREVIOUS_TAG"

      - name: Generate Release Body
        id: release_body
        run: |
          CURRENT_TAG="${{ steps.previoustag.outputs.current_tag }}"
          PREVIOUS_TAG="${{ steps.previoustag.outputs.previous_tag }}"
          
          # 移除标题，避免重复
          echo "## 📝 Changelog" > release_body.md
          echo "" >> release_body.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Full Changelog: [$PREVIOUS_TAG...$CURRENT_TAG](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)" >> release_body.md
            echo "" >> release_body.md
            
            # 获取提交日志并分类
            echo "### 🚀 Features" >> release_body.md
            git log --pretty=format:"* %s" $PREVIOUS_TAG..$CURRENT_TAG | grep -i "feat\|feature\|新增\|添加" >> release_body.md || echo "* No new features" >> release_body.md
            echo "" >> release_body.md
            
            echo "### 🐛 Bug Fixes" >> release_body.md
            git log --pretty=format:"* %s" $PREVIOUS_TAG..$CURRENT_TAG | grep -i "fix\|修复\|bug" >> release_body.md || echo "* No bug fixes" >> release_body.md
            echo "" >> release_body.md
            
            echo "### ♻️ Other Changes" >> release_body.md
            git log --pretty=format:"* %s" $PREVIOUS_TAG..$CURRENT_TAG | grep -v -i "feat\|feature\|fix\|bug\|新增\|添加\|修复" >> release_body.md || echo "* No other changes" >> release_body.md
          else
            echo "🎉 First Release" >> release_body.md
          fi
      
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.pre_check.outputs.version }}
          name: ${{ needs.pre_check.outputs.version }}
          artifacts: "build/*"
          allowUpdates: true
          makeLatest: true
          replacesArtifacts: true
          bodyFile: release_body.md