version: '3.8'

services:
  connection-cli:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - MODE=${MODE:-help}
      - HOST=${HOST:-localhost}
      - PORT=${PORT:-0}
      - USERNAME=${USERNAME:-}
      - PASSWORD=${PASSWORD:-}
      - DATABASE=${DATABASE:-}
      - URL=${URL:-}
      - TIMEOUT=${TIMEOUT:-5s}
      - SSLMODE=${SSLMODE:-disable}
      - REDIS_DB=${REDIS_DB:-0}
      - HTTP_METHOD=${HTTP_METHOD:-GET}
      - HEALTH_MODE=${HEALTH_MODE:-port}
      - HEALTH_HOST=${HEALTH_HOST:-localhost}
      - HEALTH_PORT=${HEALTH_PORT:-80}
      - HEALTH_TIMEOUT=${HEALTH_TIMEOUT:-5s}
    volumes:
      - ./logs:/app/logs
    networks:
      - connection-cli-network
    # 容器会一直运行
    tty: true
    stdin_open: true

  # Example services for testing
  mysql:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: testdb
    ports:
      - "3306:3306"
    networks:
      - connection-cli-network

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    networks:
      - connection-cli-network

  redis:
    image: redis:7.0
    command: redis-server --requirepass password --user default on >password ~* +@all --user testuser on >testpassword ~* +@all
    ports:
      - "6379:6379"
    networks:
      - connection-cli-network

  webserver:
    image: nginx:alpine
    ports:
      - "8080:80"
    networks:
      - connection-cli-network

networks:
  connection-cli-network:
    driver: bridge 